Sure, here's a basic setup for each requirement. Note that this is a starting point and you may need to customize this to fit your specific needs.

1. Docker Configuration:
```
FROM node:14
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 8080
CMD [ "npm", "start" ]
```

2. Deployment Scripts (using Fastlane for iOS and Gradle for Android):
- Fastlane (Fastfile):
```ruby
default_platform(:ios)
platform :ios do
  desc "Push a new beta build to the App Store"
  lane :beta do
    increment_build_number
    build_app(workspace: "YourApp.xcworkspace", scheme: "YourApp")
    upload_to_testflight
  end
end
```
- Gradle (build.gradle):
```groovy
apply plugin: 'com.android.application'
android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.yourapp"
        minSdkVersion 15
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}
```

3. Firebase Cloud Messaging (FCM) Configuration:
This typically involves setting up the Firebase SDK in your application. Here's a basic example for Android in the `build.gradle` file:
```groovy
dependencies {
    // Add the Firebase SDK for Google Analytics
    implementation 'com.google.firebase:firebase-analytics:17.2.2'
    // Add the SDK for Firebase Cloud Messaging
    implementation 'com.google.firebase:firebase-messaging:20.1.0'
}
```

4. Data Backup Configuration:
Data backup depends on the cloud provider you are using. Here's a basic AWS CLI command for backing up to S3:
```sh
aws s3 cp /path/to/your/data s3://your-bucket-name
```

5. GDPR Compliance:
This is more a matter of policy and less about configuration. You should ensure encryption in your application and restrict access to sensitive data.

6. Performance:
This involves setting up a load balancer and auto-scaling on your cloud provider. Here's how you might define an auto-scaling group with AWS CloudFormation:
```yaml
Resources:
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AvailabilityZones: 
        - eu-west-1a
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: '1'
      MaxSize: '5'
      DesiredCapacity: '3'
```

7. CI/CD Pipeline:
This depends on the CI/CD tool you are using. Here's a basic `.gitlab-ci.yml` file for GitLab CI/CD:
```yaml
stages:
  - build
  - test
  - deploy

build:
  stage: build
  script: echo "Building the app"

test:
  stage: test
  script: echo "Testing the app"

deploy:
  stage: deploy
  script: echo "Deploying the app"
```