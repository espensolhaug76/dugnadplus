```sql
-- SQL table creation statements
CREATE TABLE Families (
    Family_ID serial PRIMARY KEY,
    Parent_1_ID integer,
    Parent_2_ID integer,
    Family_Name text
);

CREATE TABLE Members (
    Member_ID serial PRIMARY KEY,
    First_Name text,
    Last_Name text,
    Email text,
    Password text,
    Role text,
    Family_ID integer REFERENCES Families(Family_ID)
);

CREATE TABLE Teams (
    Team_ID serial PRIMARY KEY,
    Team_Name text,
    Coach_ID integer
);

CREATE TABLE Team_Members (
    Team_ID integer REFERENCES Teams(Team_ID),
    Member_ID integer REFERENCES Members(Member_ID)
);
```

```javascript
// JavaScript/TypeScript functions
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://xyzcompany.supabase.co'
const supabaseKey = 'public-anon-1234'
const supabase = createClient(supabaseUrl, supabaseKey)

async function createFamily(parent1Id, parent2Id, familyName) {
    let { data, error } = await supabase
      .from('Families')
      .insert([
        { Parent_1_ID: parent1Id, Parent_2_ID: parent2Id, Family_Name: familyName },
      ])
    if (error) throw error
    return data
}

async function createMember(firstName, lastName, email, password, role, familyId) {
    let { data, error } = await supabase
      .from('Members')
      .insert([
        { First_Name: firstName, Last_Name: lastName, Email: email, Password: password, Role: role, Family_ID: familyId },
      ])
    if (error) throw error
    return data
}

async function createTeam(teamName, coachId) {
    let { data, error } = await supabase
      .from('Teams')
      .insert([
        { Team_Name: teamName, Coach_ID: coachId },
      ])
    if (error) throw error
    return data
}

async function addMemberToTeam(teamId, memberId) {
    let { data, error } = await supabase
      .from('Team_Members')
      .insert([
        { Team_ID: teamId, Member_ID: memberId },
      ])
    if (error) throw error
    return data
}
```

```javascript
// API endpoint implementations
app.post('/createFamily', async (req, res) => {
    const data = await createFamily(req.body.parent1Id, req.body.parent2Id, req.body.familyName)
    res.json(data)
})

app.post('/createMember', async (req, res) => {
    const data = await createMember(req.body.firstName, req.body.lastName, req.body.email, req.body.password, req.body.role, req.body.familyId)
    res.json(data)
})

app.post('/createTeam', async (req, res) => {
    const data = await createTeam(req.body.teamName, req.body.coachId)
    res.json(data)
})

app.post('/addMemberToTeam', async (req, res) => {
    const data = await addMemberToTeam(req.body.teamId, req.body.memberId)
    res.json(data)
})
```