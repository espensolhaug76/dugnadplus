Sure, here's the code relating to your requirements:

```sql
-- SQL table creation statements

CREATE TABLE families (
  id SERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

CREATE TABLE members (
  id SERIAL PRIMARY KEY,
  family_id INTEGER REFERENCES families(id),
  name TEXT NOT NULL,
  role TEXT CHECK(role IN ('player', 'coach', 'volunteer')),
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

CREATE TABLE teams (
  id SERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

CREATE TABLE team_members (
  team_id INTEGER REFERENCES teams(id),
  member_id INTEGER REFERENCES members(id),
  role_in_team TEXT CHECK(role_in_team IN ('player', 'coach', 'volunteer')),
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);
```

```javascript
// JavaScript/TypeScript functions and API endpoint implementations

const { createClient } = require('@supabase/supabase-js');
const SUPABASE_URL = 'YOUR_SUPABASE_URL';
const SUPABASE_KEY = 'YOUR_SUPABASE_KEY';
const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);

const createFamily = async (familyName) => {
  const { data, error } = await supabase
    .from('families')
    .insert([{ name: familyName }]);
  if (error) throw error;
  return data;
};

const createMember = async (familyId, memberName, role) => {
  const { data, error } = await supabase
    .from('members')
    .insert([{ family_id: familyId, name: memberName, role: role }]);
  if (error) throw error;
  return data;
};

const createTeam = async (teamName) => {
  const { data, error } = await supabase
    .from('teams')
    .insert([{ name: teamName }]);
  if (error) throw error;
  return data;
};

const addMemberToTeam = async (teamId, memberId, roleInTeam) => {
  const { data, error } = await supabase
    .from('team_members')
    .insert([{ team_id: teamId, member_id: memberId, role_in_team: roleInTeam }]);
  if (error) throw error;
  return data;
};
```

Note that you should replace `'YOUR_SUPABASE_URL'` and `'YOUR_SUPABASE_KEY'` with your actual Supabase URL and key. 

The error handling is done with the `if (error) throw error;` lines, which will throw an error if the Supabase operation fails.

Norwegian business logic is not specified in the requirements, but you can adjust the functions to suit any specific Norwegian business practices or rules as needed.