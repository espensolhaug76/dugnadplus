Here is a simplified example of what the test cases might look like in Python, using the unittest library:

```python
import unittest
from volunteer_system import VolunteerSystem, SportsClub

class TestVolunteerSystem(unittest.TestCase):
    def setUp(self):
        self.vol_sys = VolunteerSystem()
        self.sports_club = SportsClub()
        self.mock_data = {"club": "Football", "volunteers": 20, "events": 5}

    def test_unit_point_calculation(self):
        points = self.vol_sys.calculate_points(self.mock_data)
        self.assertEqual(points, 100)

    def test_unit_shift_assignments(self):
        assignments = self.vol_sys.assign_shifts(self.mock_data)
        self.assertEqual(assignments, 10)
        
    def test_unit_bidding_logic(self):
        bids = self.vol_sys.bidding_logic(self.mock_data)
        self.assertEqual(bids, 5)

    def test_integration_volunteer_system(self):
        self.vol_sys.assign_volunteers(self.mock_data)
        self.vol_sys.calculate_points(self.mock_data)
        self.vol_sys.bidding_logic(self.mock_data)
        self.assertEqual(self.mock_data["volunteers"], 20)

    def test_system_volunteer_system(self):
        self.vol_sys.run_all(self.mock_data)
        self.assertEqual(self.mock_data["volunteers"], 20)
        self.assertEqual(self.mock_data["events"], 5)

    def test_acceptance_volunteer_system(self):
        self.vol_sys.user_acceptance(self.mock_data)
        self.assertTrue(self.vol_sys.accepted)

    def test_manual_testing(self):
        self.vol_sys.manual_testing(self.mock_data)
        self.assertTrue(self.vol_sys.manual_test_passed)

    def test_performance_volunteer_system(self):
        load = self.vol_sys.load_test(self.mock_data)
        self.assertTrue(load < 5)

    def test_regression_volunteer_system(self):
        self.vol_sys.regression_test(self.mock_data)
        self.assertTrue(self.vol_sys.regression_test_passed)
        
    def test_security_volunteer_system(self):
        security = self.vol_sys.security_test(self.mock_data)
        self.assertTrue(security)

if __name__ == "__main__":
    unittest.main()
```

Please note that this is a very simplified version and actual test cases will be much more complex and require more information to write. The functions `calculate_points`, `assign_shifts`, `bidding_logic`, etc., are assumed to be defined in the `VolunteerSystem` class and their implementations are not provided here. Also, the `mock_data` is a simple dictionary and in real testing scenarios, it would be a more complex structure or even a database.